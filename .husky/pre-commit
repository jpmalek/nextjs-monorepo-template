#!/usr/bin/env sh

# Skip pre-commit checks in CI environment
if [ "$CI" = "true" ]; then
  echo "CI environment detected. Skipping pre-commit hooks."
  exit 0
fi

# Ensure versions are synchronized between package.json and .env.
# This script makes `packageManager` the source of truth for the pnpm version
# and syncs it to `engines.pnpm`. It also syncs versions to the .env file.
if node scripts/ensure-env-versions.js; then
  # If the script updated package.json, stage the changes so they are included in the commit.
  git add package.json
else
  echo "❌ Failed to synchronize versions. Please check script output above."
  exit 1 # Fail the commit if the script errors
fi


echo "🔍 Running Sherif to check and fix package.json files..."
if pnpm dlx sherif@latest -f; then
  echo "✅ Sherif check passed (or fixed issues)."
  # Stage any package.json files that Sherif might have modified
  git add package.json apps/*/package.json packages/*/package.json 2>/dev/null || true
else
  echo "❌ Sherif found issues that could not be automatically fixed or an error occurred."
  echo "Please review the output above, fix the issues, and try committing again."
  exit 1
fi

# Check for changes in package.json to generate docs
# This runs AFTER Sherif has potentially modified and staged package.json files
CHANGED_PKG_JSON_FOR_DOCS=$(git diff --cached --name-only --diff-filter=ACM | grep "package.json" || true)

if [ -n "$CHANGED_PKG_JSON_FOR_DOCS" ]; then
  echo "📦 package.json changed — generating docs..."
  node scripts/generatePackageDocs.js

  echo "📄 Staging updated package.md files..."
  # Add all modified/new package.md files generated by the script
  # This attempts to add only newly created or modified package.md files by the script
  # A more robust way would be if generatePackageDocs.js outputted a list of files it touched.
  git ls-files --modified --others --exclude-standard | grep "package.md" | xargs -r git add 2>/dev/null || true
fi

echo "Linting code..."
# Run lint check
pnpm run lint

# If lint check fails, exit with error
if [ $? -ne 0 ]; then
  echo "❌ Lint check failed. Please fix the linting errors before committing."
  exit 1
fi
echo "✅ Lint check passed."

echo "Checking types..."
# Run type check
pnpm check-types

# If type check fails, exit with error
if [ $? -ne 0 ]; then
  echo "❌ Type check failed. Please fix the TypeScript errors before committing."
  exit 1
fi
echo "✅ Type check passed."

echo "Running tests..."
# Run tests
pnpm run test

# If tests fail, exit with error
if [ $? -ne 0 ]; then
  echo "❌ Tests failed. Please fix the tests before committing."
  exit 1
fi
echo "✅ Tests passed."

echo "🚀 Pre-commit checks passed."

